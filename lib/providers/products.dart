import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:flutter_shop_app/models/http_exception.dart';
import 'package:flutter_shop_app/providers/product.dart';

import 'package:http/http.dart' as http;

class Products with ChangeNotifier {
  final String authToken;

  Products(this.authToken, this._items);

  List<Product> _items = [
    Product(
      id: 'p1',
      title: 'Red Shirt',
      description: 'A red shirt - it is pretty red!',
      price: 29.99,
      imageUrl:
          'https://cdn.pixabay.com/photo/2016/10/02/22/17/red-t-shirt-1710578_1280.jpg',
    ),
    Product(
      id: 'p2',
      title: 'Trousers',
      description: 'A nice pair of trousers.',
      price: 59.99,
      imageUrl:
          'https://upload.wikimedia.org/wikipedia/commons/thumb/e/e8/Trousers%2C_dress_%28AM_1960.022-8%29.jpg/512px-Trousers%2C_dress_%28AM_1960.022-8%29.jpg',
    ),
    Product(
      id: 'p3',
      title: 'Yellow Scarf',
      description: 'Warm and cozy - exactly what you need for the winter.',
      price: 19.99,
      imageUrl:
          'https://live.staticflickr.com/4043/4438260868_cc79b3369d_z.jpg',
    ),
    Product(
      id: 'p4',
      title: 'A Pan',
      description: 'Prepare any meal you want.',
      price: 49.99,
      imageUrl:
          'https://upload.wikimedia.org/wikipedia/commons/thumb/1/14/Cast-Iron-Pan.jpg/1024px-Cast-Iron-Pan.jpg',
    ),
  ];

  List<Product> get items {
    return [..._items];
  }

  List<Product> get favoriteItems {
    return _items.where((element) => element.isFavorite).toList();
  }

  Product findById(String productId) {
    return _items.firstWhere((element) => element.id == productId);
  }

  Future<void> fetchAndSetProducts() async {
    final dbUrl = Uri.parse(
        "https://flutter-course-536b7-default-rtdb.europe-west1.firebasedatabase.app/products.json?auth=$authToken");

    try {
      final response = await http.get(dbUrl);
      print(json.decode(response.body));
      final extractedData = json.decode(response.body) as Map<String, dynamic>;
      _items = [];
      if (extractedData == null) {
        return;
      }
      extractedData.forEach((key, value) {
        _items.add(Product(
          id: key,
          description: value['description'],
          imageUrl: value['imageUrl'],
          price: value['price'],
          title: value['title'],
          isFavorite: value['isFavorite'],
        ));
      });
      notifyListeners();
    } catch (error) {
      throw error;
    }
  }

  Future<void> addProduct(Product product) async {
    final dbUrl = Uri.parse(
        "https://flutter-course-536b7-default-rtdb.europe-west1.firebasedatabase.app/products.json?auth=$authToken");

    try {
      final response = await http.post(
        dbUrl,
        body: json.encode({
          "title": product.title,
          "description": product.description,
          "imageUrl": product.imageUrl,
          "price": product.price,
          "isFavorite": product.isFavorite,
        }),
      );

      // print(json.decode(response.body)['name']); // the id generated by the firebase
      final newProduct = Product(
        description: product.description,
        imageUrl: product.imageUrl,
        price: product.price,
        title: product.title,
        id: json.decode(response.body)['name'],
      );
      _items.add(newProduct);
      notifyListeners();
    } catch (error) {
      print(error);
      throw error;
    }
  }

  Future<void> updateProduct(String productId, Product product) async {
    int index = _items.indexWhere((element) => element.id == productId);

    if (index != -1) {
      _items[index] = product;

      final dbUrl1 = Uri.parse(
          "https://flutter-course-536b7-default-rtdb.europe-west1.firebasedatabase.app/products/$productId.json");

      await http.patch(dbUrl1,
          body: json.encode({
            'title': product.title,
            'description': product.description,
            'imageUrl': product.imageUrl,
            'price': product.price,
          }));
      notifyListeners();
    }
  }

  Future<void> deleteProduct(String productId) async {
    // using optimistic delete: (delete an element anad if an error happens return it back)
    final dbUrl1 = Uri.parse(
        "https://flutter-course-536b7-default-rtdb.europe-west1.firebasedatabase.app/products/$productId.json");

    final existingProductIndex =
        _items.indexWhere((element) => element.id == productId);
    dynamic existingProduct = _items[existingProductIndex];

    _items.removeWhere((element) => element.id == productId);
    notifyListeners();

    final response = await http.delete(dbUrl1);
    if (response.statusCode >= 400) {
      // if an error happens => the product still exists
      _items.insert(existingProductIndex, existingProduct);
      notifyListeners();
      throw HttpException("Could not delete Product");
    }
    existingProduct = null;
  }
}
